generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id       Int    @id @default(autoincrement())
  userType String
  userName String @unique
  password String
}

model ProductType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  mrp           Float
  sellPrice     Float
  image         String
  productTypeId Int
  currentStock  Int
  rating        Float?      @default(0)
  smallSize     Int         @default(0)
  mediumSize    Int         @default(0)
  largeSize     Int         @default(0)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  productType   ProductType @relation(fields: [productTypeId], references: [id])

  @@index([productTypeId])
    @@index([isActive])
    @@index([createdAt])
}

model BuyerMaster {
  id           Int           @id @default(autoincrement())
  customerName String
  email        String        @unique
  password     String
  address      String?
  city         String?
  createdAt    DateTime      @default(now())
  sales        SalesMaster[]

  @@index([createdAt])
}

model SalesMaster {
  id               String             @id @default(uuid())
  SODateTime       DateTime
  grandTotalPrice  Float
  paymentMode      String
  paymentDetails   String?
  bId              Int
  buyer            BuyerMaster        @relation(fields: [bId], references: [id])
  salesTransaction SalesTransaction[]

  @@index([bId])
    @@index([SODateTime])
}

model SalesTransaction {
  id           String      @id @default(uuid())
  productId    Int
  productName  String
  unitPrice    Float
  qtyPurchased Int
  total        Float
  SMOid        String
  salesMaster  SalesMaster @relation(fields: [SMOid], references: [id])
}
